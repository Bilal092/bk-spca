AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

//C += A*B
//square matrices of dim 8*14*8=64*14
//blockDim.x==NUMTHREADS must be 1024
//gridDim.x==NUMBLOCKS must be 14*14*2
//number of warps  in grid = 32*14*14*2
__global__ void
__launch_bounds__(NUMTHREADS, 1)
mmult(double *A, double *B, double *C){
  int warpid = threadIdx.x/32+blockIdx.x*32;
  int tid32 = threadIdx.x%32;
  int ib = (warpid%NW);
  int jb = (warpid/NW);
  ib *= 8;
  jb *= 8;
  int i = ib + tid32%8;
  int j = jb + tid32/8;
  for(int k = 0; k < N; k++){
    C[i+j*N] += A[i+k*N]*B[k+j*N];
    C[i+(j+4)*N] += A[i+k*N]*B[k+(j+4)*N];
  }
}


BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

__global__ void
__launch_bounds__(NUMTHREADS,1)
mmult(double *A, double *B, double * C){
  int tid1024 = threadIdx.x;
  __shared__ double smem[3*32*32];
  int ib = blockIdx.x%14;
  int jb = blockIdx.x/14;
  ib *= 32;
  jb *= 32;
  int ii = tid1024%32;
  int jj = tid1024/32;
  double *smemA = smem;
  double *smemB = smem+32*32;
  double *smemC = smem+2*32*32;
  smemC[ii+32*jj] = C[(ib+ii)+N*(jb+jj)];
  for(int kb = 0; kb < N; kb += 32){
    int kk = tid1024/32;
    smemA[ii+32*kk] = A[(ib+ii)+N*(kb+kk)]; 
    kk = tid1024%32;
    smemB[kk+32*jj] = B[(kb+kk)+N*(jb+jj)];
    __syncthreads();
    for(int kk=0; kk < 32; kk++)
      smemC[ii+32*jj] += smemA[ii+32*kk]*smemB[kk+32*jj];
  }
  C[(ib+ii)+N*(jb+jj)] = smemC[ii+32*jj];
}


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

mmult.exe
  matrix multiplication in global memory
                      count = 100
   dim of square matrices N = 896
               time elapsed = 7043.09 milliseconds
      giga flops per second = 20.4263
            flops per cycle = 17.8085

matrix multiplication using shared memory
                      count = 100
   dim of square matrices N = 896
               time elapsed = 9833.91 milliseconds
      giga flops per second = 14.6294
            flops per cycle = 12.7545

[root@ip-10-17-128-184 bq-gpu]# mmult.exe
  matrix multiplication in global memory
                      count = 1000
   dim of square matrices N = 448
               time elapsed = 2852.55 milliseconds
      giga flops per second = 63.042
            flops per cycle = 54.9625

